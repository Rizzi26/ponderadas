1. Configurar balanceamento de carga mais robusto com Nginx
(ou outro balanceador) e testar com múltiplas instâncias do FastAPI.

2. Escolher e integrar um banco de dados
(PostgreSQL, MongoDB, Redis etc), criar os modelos e garantir a integridade.

3. Implementar autenticação básica (JWT, OAuth2) no backend.

4. Escrever testes automatizados para as rotas e funcionalidades principais.

5. Documentar tudo no README, explicando as escolhas feitas.


O que falta implementar / melhorar para cumprir o desafio
1. Balanceamento de Carga Real e Escalabilidade Horizontal

O que fazer:

- Configurar um balanceador de carga real (ex: Nginx configurado com round-robin ou outro método, HAProxy, Traefik).

- Automatizar o aumento e diminuição de réplicas do serviço FastAPI (com Docker Compose, Kubernetes, ou outro orquestrador).

- Testar como o sistema se comporta quando muitas requisições chegam simultaneamente, simulando carga com ferramentas tipo Apache Bench, JMeter ou locust.

Por que:

- Para distribuir a carga de forma eficiente entre múltiplas instâncias do backend.

- Para garantir que o sistema pode crescer horizontalmente conforme a demanda.
